<project name="zap" default="crowdin-download-translations" basedir=".">
	<description>Build ZAP.</description>
	<!-- set global properties for this build -->
	<property name="src" location="../../zaproxy/src" />
	<property name="src.version" value="1.7" />
	<property name="build" location="build" />
	<property name="build.lib.dir" location="lib" />
	<property name="build.crowdin.dir" location="${build}/crowdin" />
	<property name="crowdin.dir" location="crowdin" />
	<property name="lang.dir" value="${src}/lang" />
	<property name="help.dir" value="../../zap-core-help/src/help" />
	<property name="wiki.dir" location="../../zap-core-help-wiki/" />
	<property name="zap.extensions.alpha.dir" location="../../zap-extensions_alpha/" />
	<property name="zap.extensions.beta.dir" location="../../zap-extensions_beta/" />
	<property name="zap.extensions.trunk.dir" location="../../zap-extensions/" />
	<property name="zap.test.trunk.dir" location="../../zaproxy-test/" />
	<property name="zap.java.api.version" value="4" />
	<property name="package" value="zaproxy" />

	<property name="crowdin.zap.project.id" value="owasp-zap" />
	<property name="crowdin.zap.help.project.id" value="owasp-zap-help" />

	<property file="crowdin-api-keys"/>

	<!-- svn command line -->
	<property name="svn.cmd" value="svn" />
	<property name="git.cmd" value="git" />

	<path id="build.classpath">
		<fileset dir="${build.lib.dir}" includes="*.jar"/>
	</path>

	<!-- Ant task to generate the wiki -->
	<taskdef classpathref="build.classpath" resource="wikitasks.properties" />

	<!-- Ant task to generate JavaHelp jars -->
	<taskdef name="generatejavahelpjars" classname="org.zaproxy.ant.javahelp.taskdefs.GenerateJavaHelpJars" classpathref="build.classpath" />

	<!-- Crowdin related Ant types -->
	<typedef name="crowdinconfiguration" classname="org.zaproxy.ant.crowdin.types.Configuration" classpathref="build.classpath" loaderref="lib.path.loader" />
	<typedef name="cclanguagemapping" classname="org.zaproxy.ant.crowdin.types.LanguageMapping" loaderref="lib.path.loader" />
	<typedef name="ccexclude" classname="org.zaproxy.ant.crowdin.types.Exclude" loaderref="lib.path.loader" />
	<typedef name="ccproject" classname="org.zaproxy.ant.crowdin.types.Project" loaderref="lib.path.loader" />
	<typedef name="ccfiles" classname="org.zaproxy.ant.crowdin.types.FileSet" loaderref="lib.path.loader" />
	<typedef name="ccinclude" classname="org.zaproxy.ant.crowdin.types.Include" loaderref="lib.path.loader" />
	<typedef name="cclocalresources" classname="org.zaproxy.ant.crowdin.types.LocalResourceSet" loaderref="lib.path.loader" />
	<typedef name="cctranslatableelement" classname="org.zaproxy.ant.crowdin.types.TranslatableElement" loaderref="lib.path.loader" />
	<typedef name="clastmodifieddateprovider" classname="org.zaproxy.ant.crowdin.types.ModifiedDateProvider" loaderref="lib.path.loader" />
	<!-- Crowdin related Ant tasks -->
	<taskdef name="crowdinupdatesources" classname="org.zaproxy.ant.crowdin.taskdefs.CrowdinUpdateSources" loaderref="lib.path.loader" />
	<taskdef name="crowdindownloadtranslations" classname="org.zaproxy.ant.crowdin.taskdefs.CrowdinDownloadTranslations" loaderref="lib.path.loader" />
	<taskdef name="crowdinupdatehelpsetlangattribute" classname="org.zaproxy.ant.crowdin.taskdefs.CrowdinUpdateHelpSetLangAttribute" loaderref="lib.path.loader" />
	<taskdef name="crowdinexport" classname="org.zaproxy.ant.crowdin.taskdefs.CrowdinTriggerExportPackage" loaderref="lib.path.loader" />
	<taskdef name="crowdindownload" classname="org.zaproxy.ant.crowdin.taskdefs.CrowdinDownloadPackage" loaderref="lib.path.loader" />

	<!-- task to do conditionals -->
	<taskdef classpathref="build.classpath" resource="net/sf/antcontrib/antlib.xml" />

	<!-- task to build debs -->
	<taskdef classpathref="build.classpath" name="deb" classname="org.vafer.jdeb.ant.DebAntTask"/>

	<!-- Configuration for Crowdin tasks, it represents the files (and its properties) that should be upload/download to/from Crowdin. -->
	<crowdinconfiguration id="crowdin.config">
		<!-- translation of UI strings -->
		<ccproject projectid="${crowdin.zap.project.id}" apikey="${crowdin.zap.api.key}">
			<ccexclude path="/videos/**" />
			<ccexclude path="/docs/**" />
			<!-- zaproxy project -->
			<ccfiles basedir="${lang.dir}" exportpatternprefix="/zaproxy/lang/">
				<!-- UI strings -->
				<ccinclude source="Messages.properties" 
                    crowdinpath="/%original_file_name%"
                    exportpattern="%file_name%_%locale_with_underscore%.%file_extension%" />
				<!-- Alerts -->
				<ccinclude source="vulnerabilities.xml" 
                    crowdinpath="/%original_file_name%"
                    exportpattern="%file_name%_%locale_with_underscore%.%file_extension%">
				</ccinclude>
			</ccfiles>
			<!-- zap-extensions project -->
			<!-- alpha extensions -->
			<ccfiles basedir="${zap.extensions.alpha.dir}/src/org/zaproxy/zap/extension/" 
                exportpatternprefix="/zap-extensions/alpha/">
				<ccinclude id="addons.include.messages" source="*/resources/Messages.properties" 
                    crowdinpath="/extensions/*/%original_file_name%"
                    exportpattern="*/resources/%file_name%_%locale_with_underscore%.%file_extension%" />
			</ccfiles>
			<!-- beta extensions -->
			<ccfiles basedir="${zap.extensions.beta.dir}/src/org/zaproxy/zap/extension/" 
                exportpatternprefix="/zap-extensions/beta/">
				<ccinclude refid="addons.include.messages" />
			</ccfiles>
			<!-- trunk extensions -->
			<ccfiles basedir="${zap.extensions.trunk.dir}/src/org/zaproxy/zap/extension/" 
                exportpatternprefix="/zap-extensions/trunk/">
				<ccinclude refid="addons.include.messages" />
				<ccexclude id="exclude.examples" path="example*/resources/*" />
			</ccfiles>
		</ccproject>
		<!-- translation of help resources -->
		<ccproject projectid="${crowdin.zap.help.project.id}" apikey="${crowdin.zap.help.api.key}">
			<!-- zaproxy project -->
			<ccfiles basedir="${help.dir}" exportpatternprefix="/zaproxy/">
				<!-- contents -->
				<ccinclude source="zaphelp/contents/**/*.html"
                    crowdinpath="/contents/**/%original_file_name%"
                    exportpattern="zaphelp_%locale_with_underscore%/contents/**/%original_file_name%" />
				<!-- helpset -->
				<ccinclude source="zaphelp/helpset.hs" 
                    crowdinpath="/%file_name%.xml" 
                    exportpattern="zaphelp_%locale_with_underscore%/%file_name%_%locale_with_underscore%.%file_extension%">
					<cctranslatableelement xpath="/helpset/title" />
					<cctranslatableelement xpath="/helpset/presentation/title" />
					<cctranslatableelement xpath="/helpset/view/label" />
				</ccinclude>
				<!-- toc -->
				<ccinclude source="zaphelp/toc.xml" 
                    crowdinpath="/%original_file_name%"
                    exportpattern="zaphelp_%locale_with_underscore%/%original_file_name%">
					<!-- Crowdin doesn't seem to support descendant axis -->
					<!-- <cctranslatableelement xpath="/toc/descendant::tocitem[@text]" /> -->
					<cctranslatableelement xpath="/toc/tocitem[@text]" />
					<cctranslatableelement xpath="/toc/tocitem/tocitem[@text]" />
					<cctranslatableelement xpath="/toc/tocitem/tocitem/tocitem[@text]" />
					<cctranslatableelement xpath="/toc/tocitem/tocitem/tocitem/tocitem[@text]" />
					<cctranslatableelement xpath="/toc/tocitem/tocitem/tocitem/tocitem/tocitem[@text]" />
				</ccinclude>
				<!-- index -->
				<ccinclude source="zaphelp/index.xml" 
                    crowdinpath="/%original_file_name%" 
                    exportpattern="zaphelp_%locale_with_underscore%/%original_file_name%">
					<!-- Crowdin doesn't seem to support descendant axis -->
					<!-- <cctranslatableelement xpath="/index/descendant::indexitem[@text]" /> -->
					<cctranslatableelement xpath="/index/indexitem[@text]" />
				</ccinclude>
				<cclocalresources source="zaphelp/map.jhm" 
                    dest="zaphelp_%locale_with_underscore%/%original_file_name%"
                    exportpattern="zaphelp_%locale_with_underscore%" />
				<cclocalresources source="zaphelp/contents/**" 
                    dest="zaphelp_%locale_with_underscore%/contents/**"
                    exportpattern="zaphelp_%locale_with_underscore%">
					<ccexclude path="zaphelp/contents/**/*.html" />
				</cclocalresources>
			</ccfiles>
			<!-- zap-extensions project -->
			<!-- alpha extensions -->
			<ccfiles basedir="${zap.extensions.alpha.dir}/src/org/zaproxy/zap/extension/" 
                exportpatternprefix="/zap-extensions/alpha/">
				<!-- contents -->
				<ccinclude id="addons.include.help.contents" source="*/resources/help/contents/**/*.html"
                    crowdinpath="/extensions/*/contents/**/%original_file_name%"
                    exportpattern="*/resources/help_%locale_with_underscore%/contents/**/%original_file_name%" />
				<!-- helpset -->
				<ccinclude id="addons.include.help.file.hs" source="*/resources/help/helpset.hs" 
                    crowdinpath="/extensions/*/%file_name%.xml" 
                    exportpattern="*/resources/help_%locale_with_underscore%/%file_name%_%locale_with_underscore%.%file_extension%">
					<cctranslatableelement xpath="/helpset/title" />
					<cctranslatableelement xpath="/helpset/presentation/title" />
					<cctranslatableelement xpath="/helpset/view/label" />
				</ccinclude>
				<!-- toc -->
				<ccinclude id="addons.include.help.file.toc" source="*/resources/help/toc.xml" 
                    crowdinpath="/extensions/*/%original_file_name%"
                    exportpattern="*/resources/help_%locale_with_underscore%/%original_file_name%">
					<!-- Crowdin doesn't seem to support descendant axis -->
					<!-- <cctranslatableelement xpath="/toc/descendant::tocitem[@text]" /> -->
					<cctranslatableelement xpath="/toc/tocitem[@text]" />
					<cctranslatableelement xpath="/toc/tocitem/tocitem[@text]" />
					<cctranslatableelement xpath="/toc/tocitem/tocitem/tocitem[@text]" />
					<cctranslatableelement xpath="/toc/tocitem/tocitem/tocitem/tocitem[@text]" />
					<cctranslatableelement xpath="/toc/tocitem/tocitem/tocitem/tocitem/tocitem[@text]" />
				</ccinclude>
				<!-- index -->
				<ccinclude id="addons.include.help.file.index" source="*/resources/help/index.xml" 
                    crowdinpath="/extensions/*/%original_file_name%" 
                    exportpattern="*/resources/help_%locale_with_underscore%/%original_file_name%">
					<!-- Crowdin doesn't seem to support descendant axis -->
					<!-- <cctranslatableelement xpath="/index/descendant::indexitem[@text]" /> -->
					<cctranslatableelement xpath="/index/indexitem[@text]" />
				</ccinclude>
				<cclocalresources id="addons.resources.help.file.map" source="*/resources/help/map.jhm" 
                    dest="*/resources/help_%locale_with_underscore%/%original_file_name%"
                    exportpattern="*/resources/help_%locale_with_underscore%" />
				<cclocalresources id="addons.resources.help.contents" source="*/resources/help/contents/**" 
                    dest="*/resources/help_%locale_with_underscore%/contents/**"
                    exportpattern="*/resources/help_%locale_with_underscore%">
					<ccexclude path="*/resources/help/contents/**/*.html" />
				</cclocalresources>
			</ccfiles>
			<!-- beta extensions -->
			<ccfiles basedir="${zap.extensions.beta.dir}/src/org/zaproxy/zap/extension/" 
                exportpatternprefix="/zap-extensions/beta/">
				<ccinclude refid="addons.include.help.contents" />
				<ccinclude refid="addons.include.help.file.hs" />
				<ccinclude refid="addons.include.help.file.toc" />
				<ccinclude refid="addons.include.help.file.index" />
				<cclocalresources refid="addons.resources.help.file.map" />
				<cclocalresources refid="addons.resources.help.contents" />
			</ccfiles>
			<!-- trunk extensions -->
			<ccfiles basedir="${zap.extensions.trunk.dir}/src/org/zaproxy/zap/extension/" 
                exportpatternprefix="/zap-extensions/trunk/">
				<ccinclude refid="addons.include.help.contents" />
				<ccinclude refid="addons.include.help.file.hs" />
				<ccinclude refid="addons.include.help.file.toc" />
				<ccinclude refid="addons.include.help.file.index" />
				<ccexclude refid="exclude.examples" />
				<cclocalresources refid="addons.resources.help.file.map" />
				<cclocalresources refid="addons.resources.help.contents" />
			</ccfiles>
		</ccproject>
	</crowdinconfiguration>

	<path id="dist.classpath">
		<!--pathelement location="."/-->
		<fileset dir="${dist.lib.dir}" includes="**/*.jar" />
	</path>

	<target name="init">
		<!-- Create the time stamp -->
		<tstamp />

		<!-- Create the build directory structure used by compile -->

		<delete dir="${build}" includeEmptyDirs="true" />
		<mkdir dir="${build}" />
	</target>

	<target name="clean" depends="setup" description="Cleans up previous distributions">
		<delete verbose="true">
			<fileset dir="." includes="zaproxy*.deb" />
			<fileset dir="." includes="ZAP*.dmg" />
			<fileset dir="." includes="ZAP*.tar.gz" />
			<fileset dir="." includes="ZAP*.zip" />
		</delete>
		<delete dir="${app.name}" />      <!-- if you've unzipped the Mac version, for testing -->
		<delete dir="ZAP_${version}" />   <!-- if you've untarred the Linux version, for testing -->
	</target>

	<target name="generate-wiki" description="Generates the core wiki help pages">
		<local name="version" />
		<loadfile property="version" srcfile="version.txt" />
		<generatewiki basesrcdir="${help.dir}" basedestdir="${wiki.dir}"
            helpcontentsdir="contents/" helpcontentsinclude=".*\.html"
            srcimagesdir="contents/images/" destimagesdir="images" prefixlinkimages="https://github.com/zaproxy/zap-core-help/wiki/images/"
            outputfilenameprefix="Help" includeoutputfiles="Help.*\.md" excludeoutputfiles="HelpAddons.*\.md"
            helpfileextension=".html" wikifileextension=".md"
            srctocfile="toc.xml" srcmapfile="map.jhm" wikitocfilename="_Sidebar.md">

			<!-- Default language is at root of dest dir -->
			<helpdir src="zaphelp" dest="" />
			
			<!-- Languages worth publishing online.
			The publishing process is currently manual (be nice to automate sometime):
			1. Choose which languages to publish, eg those on https://crowdin.com/project/owasp-zap-help over 50% translated
			2. Make sure they are listed in the section below
			3. Run this task
			4. Delete all of the files from the existing repo and copy the new ones in
			5. Commit, push, PR and merge
			
			For newly added languages:
			1. Create a new project: https://github.com/zaproxy/zap-core-help-<local>
			2. Add a default README and Apache v2 license
			3. Add a default wiki page
			4. Clone the wiki repo locally
			5. Copy in all of the relevant files from zap-core-help.wiki as well as the images directory
			6. Manually change the HelpIntro.md page to point to the new repo and copy it to Home.md
			7. Commit, push, PR and merge
			8. Manually edit the main readme page adding the 'intro' from HelpIntro.md and the common bit from one of the other repos
			9. Update https://github.com/zaproxy/zap-core-help to include it
			 -->
            <helpdir src="zaphelp_es_ES" dest="es" />
            <helpdir src="zaphelp_fil_PH" dest="fil" />
            <helpdir src="zaphelp_id_ID" dest="id" />
            <helpdir src="zaphelp_pt_BR" dest="pt-BR" />
            <helpdir src="zaphelp_tr_TR" dest="tr" />

			<!-- Languages that havnt been translated enough to publish online yet
            <helpdir src="zaphelp_bs_BA" dest="bs" />
            <helpdir src="zaphelp_de_DE" dest="de" />
            <helpdir src="zaphelp_el_GR" dest="el" />
            <helpdir src="zaphelp_fa_IR" dest="fa" />
            <helpdir src="zaphelp_fr_FR" dest="fr" />
            <helpdir src="zaphelp_it_IT" dest="it" />
            <helpdir src="zaphelp_ja_JP" dest="ja" />
            <helpdir src="zaphelp_pl_PL" dest="pl" />
            <helpdir src="zaphelp_ru_RU" dest="ru" /> -->
		</generatewiki>
	</target>

	<macrodef name="copy-help-to-addon" description="deploy the help file to the equivalent addon">
		<attribute name="src"/>
		<attribute name="ext"/>
		<attribute name="lang"/>
		<sequential>
			<copy file="@{src}/zaphelp@{lang}.jar" 
	        	todir="@{ext}/src/org/zaproxy/zap/extension/help@{lang}/lib"/>
		</sequential>
	</macrodef>

	<target name="generate-help-jars" description="Generates all ZAP (core) help jars (default and i18n) and copies them to the right place (lib directory)">
		<!-- Note that the translated languages currently supported are explicitly named - 
    		most dont have enough content for an alpha release -->
		<local name="wkdir" />
		<property name="wkdir" location="${build}/HelpJars" />
		<delete dir="${wkdir}" includeEmptyDirs="true" />
		<mkdir dir="${wkdir}" />
		<mkdir dir="${wkdir}/jars" />
		<generatejavahelpjars jhalljar="${build.lib.dir}/jhall.jar" destdir="${wkdir}/jars" 
            workingdir="${wkdir}" helpcontentsdirname="contents" helpsetfilename="helpset*.hs">
			<dirset dir="${help.dir}">
				<include name="zaphelp" />
				<include name="zaphelp_bs_BA" />
				<include name="zaphelp_es_ES" />
				<include name="zaphelp_fil_PH" />
				<include name="zaphelp_fr_FR" />
				<include name="zaphelp_id_ID" />
				<include name="zaphelp_ja_JP" />
				<include name="zaphelp_pt_BR" />
				<include name="zaphelp_tr_TR" />
				<include name="zaphelp_zh_CN" />
			</dirset>
		</generatejavahelpjars>
		<!-- copy the jars to the right add-ons -->
		<!-- note that new add-ons are being added to the trunk, regardless of their status -->
		<!-- which is now just recorded in the manifest file -->
		<copy-help-to-addon src="${wkdir}/jars" ext="${zap.extensions.trunk.dir}" lang=""/>
		<!-- default en_GB -->
		<copy-help-to-addon src="${wkdir}/jars" ext="${zap.extensions.alpha.dir}" lang="_bs_BA"/>
		<copy-help-to-addon src="${wkdir}/jars" ext="${zap.extensions.alpha.dir}" lang="_es_ES"/>
		<copy-help-to-addon src="${wkdir}/jars" ext="${zap.extensions.trunk.dir}" lang="_fil_PH"/>
		<copy-help-to-addon src="${wkdir}/jars" ext="${zap.extensions.alpha.dir}" lang="_fr_FR"/>
		<copy-help-to-addon src="${wkdir}/jars" ext="${zap.extensions.trunk.dir}" lang="_id_ID"/>
		<copy-help-to-addon src="${wkdir}/jars" ext="${zap.extensions.alpha.dir}" lang="_ja_JP"/>
		<copy-help-to-addon src="${wkdir}/jars" ext="${zap.extensions.trunk.dir}" lang="_pt_BR"/>
		<copy-help-to-addon src="${wkdir}/jars" ext="${zap.extensions.trunk.dir}" lang="_tr_TR"/>
		<copy-help-to-addon src="${wkdir}/jars" ext="${zap.extensions.trunk.dir}" lang="_zh_CN"/>

		<delete dir="${wkdir}" includeEmptyDirs="true" />
	</target>

	<target name="crowdin-update-sources" description="Updates the sources, of all ZAP projects, into Crowdin">
		<!-- When using updateneweronly as true you have to commit/push the changes before updating the sources so the commit 
        date is newer than the modification date in Crowdin.
        Use updateneweronly as true whenever possible as it updates/uploads only the necessary files.
        Note: when moving add-ons between branches updateneweronly has to be false to force the update of export pattern -->
		<crowdinupdatesources configrefid="crowdin.config" dryrun="false" verbose="true" updateoption="update_as_unapproved" 
            xmlcontentsegmentation="false" updateneweronly="false" deleteremoved="false">
			<!-- For SVN repo, uses commit date (from svn info) -->
			<clastmodifieddateprovider name="svn" cmdpath="${svn.cmd}" failonerror="true" />
			<!-- For Git repo, uses "committer date" (from git log) -->
			<!-- <clastmodifieddateprovider name="git" cmdpath="${git.cmd}" failonerror="true" /> -->
			<!-- File system file's last modified date. Not recommended, unless files' last
            modified date is in sync with Git/SVN push/commit dates -->
			<!-- <clastmodifieddateprovider name="file-system" /> -->
		</crowdinupdatesources>
	</target>

	<target name="crowdin-download-translations" description="Downloads and updates the translations, from Crowdin, for all ZAP projects">
		<delete dir="${build.crowdin.dir}" includeEmptyDirs="true" />
		<mkdir dir="${build.crowdin.dir}" />
		<crowdindownloadtranslations configrefid="crowdin.config" verbose="false" workingdir="${build.crowdin.dir}" />
		<delete dir="${build.crowdin.dir}" includeEmptyDirs="true" />
		<crowdinupdatehelpsetlangattribute configrefid="crowdin.config" verbose="false" helpsetfilename="helpset.hs" />
	</target>

	<target name="crowdin-trigger-export-packages" description="Triggers the build of ZAP's Crowdin projects translation package">
		<crowdinexport projectid="${crowdin.zap.project.id}" apikey="${crowdin.zap.api.key}" />
		<crowdinexport projectid="${crowdin.zap.help.project.id}" apikey="${crowdin.zap.help.api.key}" />
	</target>

	<target name="crowdin-download-packages" description="Downloads ZAP's Crowdin projects translation packages">
		<crowdindownload projectid="${crowdin.zap.project.id}" apikey="${crowdin.zap.api.key}" 
            to="${crowdin.dir}/${crowdin.zap.project.id}.zip" language="all" />
		<crowdindownload projectid="${crowdin.zap.help.project.id}" apikey="${crowdin.zap.help.api.key}" 
            to="${crowdin.dir}/${crowdin.zap.help.project.id}.zip" language="all" />
	</target>


	<!-- Load the version from version.txt, set ${zap.jar} -->
	<target name="setup">
		<loadfile property="version" srcfile="version.txt" />
		<if>
			<equals arg1="${version}" arg2="Dev Build" />
			<then>
				<property name="zap.jar" value="zap-dev.jar" />
			</then>
			<else>
				<property name="zap.jar" value="zap-${version}.jar" />
			</else>
		</if>

		<echo message="Build version is: ${version}" />
		<echo message="Jar file for build is: ${zap.jar}" />
	</target>
</project>
